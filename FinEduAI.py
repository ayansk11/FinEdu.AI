# -*- coding: utf-8 -*-
"""FinEduAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OcUYJfrmk0bpPylSsfilEPyWndQ8R57B
"""

import kagglehub
import os
import pandas as pd

path = kagglehub.dataset_download("ayansk11/financial-terminologies")
print("Path to dataset files:", path)

files = os.listdir(path)
print("Files in dataset:", files)

jsonl_path = os.path.join(path, "financialdata.jsonl")

import json
import torch

df = pd.read_json(jsonl_path, lines=True)
df.head()

df.tail()

documents = []

with open(jsonl_path, 'r') as file:
    for line in file:
        documents.append(json.loads(line))

print(documents[0])

print(documents[-1])

!pip install pypdf
!pip install -q transformers einops accelerate langchain bitsandbytes
!pip install install sentence_transformers
!pip install llama_index

!pip install llama-index-llms-huggingface

!pip install llama-index-llms-huggingface llama-index-core llama-index-prompts

from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, ServiceContext
from llama_index.llms.huggingface import HuggingFaceLLM
from llama_index.core import PromptTemplate

system_prompt = """
You are a financial education Q&A assistant named FinEdu.AI.
Your primary goal is to help beginners understand financial terminologies by providing clear, concise, and accurate explanations.
When defining terms, ensure that your explanations are easy to understand, avoiding complex jargon.
Where applicable, include examples to illustrate the concepts. If a term has multiple interpretations, briefly mention the most common ones.
Always maintain a friendly and supportive tone to encourage learning.
"""

query_wrapper_prompt = PromptTemplate(
    "<|SYSTEM|>{system_prompt}<|USER|>{query_str}<|ASSISTANT|>{context_str}"
)

query_wrapper_prompt = query_wrapper_prompt.format(

    system_prompt = system_prompt,
    query_str = "{query_str}",
    context_str = "{context_str}"
)

!huggingface-cli login

llm = HuggingFaceLLM(
    context_window=4096,
    max_new_tokens=256,
    generate_kwargs={"temperature": 0.0, "do_sample": False},
    system_prompt=system_prompt,
    query_wrapper_prompt=query_wrapper_prompt,
    tokenizer_name="meta-llama/Llama-2-7b-chat-hf",
    model_name="meta-llama/Llama-2-7b-chat-hf",
    device_map="auto",
    model_kwargs={
        "torch_dtype": torch.float16,
        "load_in_8bit": True
    }
)

!pip install langchain-community llama-index-embeddings-langchain

from langchain_community.embeddings import HuggingFaceEmbeddings
from llama_index.core import Settings
from llama_index.embeddings.langchain import LangchainEmbedding

embed_model = LangchainEmbedding(
    HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")
)

Settings.embed_model = embed_model

from llama_index.core import Settings

Settings.chunk_size = 1024
Settings.llm = llm
Settings.embed_model = embed_model

from llama_index.core import Document

documents = []
with open(jsonl_path, 'r') as file:
    for line in file:
        data = json.loads(line)

        text = f"""
Term: {data.get('term', 'N/A')}
Definition: {data.get('definition', 'N/A')}
Significance: {data.get('significance', 'N/A')}
Usage: {data.get('usage', 'N/A')}
"""
        if 'implications' in data and isinstance(data['implications'], dict):
            text += "Implications:\n"
            text += f"- Increasing: {data['implications'].get('increasing', 'N/A')}\n"
            text += f"- Decreasing: {data['implications'].get('decreasing', 'N/A')}"

        doc = Document(
            text=text,
            metadata={
                "term": data.get("term", "N/A"),
                "usage": data.get("usage", "N/A")
            }
        )
        documents.append(doc)

documents

index = VectorStoreIndex.from_documents(

    documents,
    llm = llm,
    embed_model = embed_model,
    chunk_size = 1024
)

index

query_engine = index.as_query_engine()

response = query_engine.query("what is eps?")

print(response)

response = query_engine.query("Explain Price-to-Earnings Ratio")

print(response)

!pip install gradio

import gradio as gr


def process_query(user_input):
    response = query_engine.query(user_input)
    return response


# Create a professional light theme for finance education
custom_theme = gr.themes.Soft(
    primary_hue=gr.themes.colors.blue,
    secondary_hue=gr.themes.colors.green,
    neutral_hue=gr.themes.colors.slate,
    spacing_size="lg",
    radius_size="md",
    text_size="md",
    font=[
        gr.themes.GoogleFont("Inter"),
        "system-ui",
        "sans-serif"
    ]
).set(
    # Basic light theme customization with supported properties
    body_background_fill="#fafafa",
    body_text_color="#1f2937",
    background_fill_primary="white",
    background_fill_secondary="#f8fafc",
    border_color_primary="#e2e8f0",

    # Button styling (simplified)
    button_primary_background_fill="#3b82f6",
    button_primary_background_fill_hover="#2563eb",
    button_primary_text_color="white",

    # Input styling (simplified)
    input_background_fill="white",
    input_border_color="#d1d5db",

    # Block styling (simplified)
    block_background_fill="white",
    block_border_color="#e5e7eb"
)


with gr.Blocks(theme=custom_theme, title="FinEdu.AI - Financial Education Assistant", css="""
    /* Custom CSS for enhanced styling */
    .gradio-container {
        max-width: 1200px !important;
        margin: 0 auto !important;
        padding: 2rem !important;
    }

    .main-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 16px;
        color: white !important;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .subtitle {
        text-align: center;
        margin-bottom: 2rem;
        font-size: 1.1rem;
        color: #6b7280;
        line-height: 1.6;
        padding: 0 1rem;
    }

    .input-section {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border: 1px solid #e5e7eb;
        margin-bottom: 1.5rem;
    }

    .output-section {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border: 1px solid #e5e7eb;
        margin-bottom: 1.5rem;
    }

    .examples-section {
        background: #f8fafc;
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        margin-top: 1rem;
    }

    .feature-highlight {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        gap: 1.5rem;
        margin: 2rem 0;
        padding: 1.5rem;
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        border-radius: 12px;
        border: 1px solid #bae6fd;
    }

    .feature-item {
        text-align: center;
        color: #0369a1;
        font-weight: 500;
        min-width: 120px;
    }

    .footer-note {
        text-align: center;
        margin-top: 2rem;
        padding: 1rem;
        color: #6b7280;
        font-size: 0.9rem;
        background: #f9fafb;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
    }

    /* Button styling */
    .btn-primary {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%) !important;
        border: none !important;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;
        transition: all 0.2s ease !important;
    }

    .btn-primary:hover {
        transform: translateY(-1px) !important;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1) !important;
    }

    /* Input styling */
    textarea, input[type="text"] {
        border: 1px solid #d1d5db !important;
        border-radius: 8px !important;
        transition: all 0.2s ease !important;
    }

    textarea:focus, input[type="text"]:focus {
        border-color: #3b82f6 !important;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
    }
""") as demo:

    # Header Section
    with gr.Row():
        gr.HTML("""
            <div class="main-header">
                <h1 style='margin: 0 0 0.5rem 0; font-size: 3rem; font-weight: 700;'>
                    ðŸ’° FinEdu.AI
                </h1>
                <p style='margin: 0; font-size: 1.2rem; opacity: 0.9;'>
                    Your AI-Powered Financial Education Companion
                </p>
            </div>
        """)

    # Subtitle
    with gr.Row():
        gr.HTML("""
            <div class="subtitle">
                Master financial concepts with personalized explanations, real-world examples,
                and interactive learning tailored to your experience level.
            </div>
        """)

    # Feature highlights
    with gr.Row():
        gr.HTML("""
            <div class="feature-highlight">
                <div class="feature-item">
                    <div style="font-size: 1.5rem; margin-bottom: 0.5rem;">ðŸ“š</div>
                    <div>Comprehensive Learning</div>
                </div>
                <div class="feature-item">
                    <div style="font-size: 1.5rem; margin-bottom: 0.5rem;">ðŸŽ¯</div>
                    <div>Personalized Explanations</div>
                </div>
                <div class="feature-item">
                    <div style="font-size: 1.5rem; margin-bottom: 0.5rem;">ðŸ’¡</div>
                    <div>Real-World Examples</div>
                </div>
                <div class="feature-item">
                    <div style="font-size: 1.5rem; margin-bottom: 0.5rem;">âš¡</div>
                    <div>Instant Answers</div>
                </div>
            </div>
        """)

    # Main Interface
    with gr.Row(equal_height=True):
        with gr.Column(scale=2):
            gr.HTML("""
                <div class="input-section">
                    <h3 style='margin-top: 0; color: #1f2937; font-weight: 600; margin-bottom: 1rem;'>Ask Your Question</h3>
                </div>
            """)
            input_text = gr.Textbox(
                label="",
                placeholder="Example: What is compound interest and how does it work in practice?",
                lines=4,
                container=False
            )

            with gr.Row():
                submit_btn = gr.Button(
                    "Get Expert Answer",
                    variant="primary",
                    size="lg",
                    elem_classes="btn-primary"
                )
                clear_btn = gr.Button(
                    "Clear",
                    variant="secondary",
                    size="lg"
                )

        with gr.Column(scale=3):
            gr.HTML("""
                <div class="output-section">
                    <h3 style='margin-top: 0; color: #1f2937; font-weight: 600; margin-bottom: 1rem;'>Expert Response</h3>
                </div>
            """)
            output_text = gr.Textbox(
                label="",
                lines=8,
                container=False,
                interactive=False
            )

    # Examples Section
    with gr.Row():
        with gr.Column():
            gr.HTML("""
                <div class="examples-section">
                    <h4 style='margin-top: 0; margin-bottom: 1rem; color: #374151;'>ðŸ’¡ Try These Example Questions</h4>
                </div>
            """)
            gr.Examples(
                examples=[
                    "What is the difference between stocks and bonds?",
                    "How does compound interest work with real examples?",
                    "What is diversification in investment portfolios?",
                    "Explain the concept of risk vs return in investing",
                    "What are ETFs and how do they work?",
                    "How do credit scores affect loan interest rates?",
                    "What is the time value of money?",
                    "Explain inflation and its impact on savings"
                ],
                inputs=input_text
            )

    # Footer
    with gr.Row():
        gr.HTML("""
            <div class="footer-note">
                <strong>FinEdu.AI</strong> provides educational information and should not be considered as personalized financial advice.
                Always consult with qualified financial professionals for investment decisions.
            </div>
        """)

    # Event handlers
    submit_btn.click(
        fn=process_query,
        inputs=input_text,
        outputs=output_text,
        show_progress=True
    )

    clear_btn.click(
        fn=lambda: ("", ""),
        outputs=[input_text, output_text]
    )

    # Enter key support
    input_text.submit(
        fn=process_query,
        inputs=input_text,
        outputs=output_text,
        show_progress=True
    )


demo.launch(share=True)